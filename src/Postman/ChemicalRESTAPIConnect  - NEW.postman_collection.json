{
	"info": {
		"_postman_id": "cc3c7f55-08cd-418d-853a-d728e710b86f",
		"name": "ChemicalRESTAPIConnect  - NEW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Dictionaries",
			"item": [
				{
					"name": "$count (dictionaries)",
					"item": [
						{
							"name": "ChemAssetsCapsProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProduct/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProduct",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsState",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsState/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsState",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsGeography",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsGeography/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsGeography",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsProcess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProcess/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProcess",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsConcept/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsConcept",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsProducer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProducer/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProducer",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsUnit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsUnit/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsUnit",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsShareholder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsShareholder/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsShareholder",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "All (collection)",
					"item": [
						{
							"name": "ChemAssetsCapsProcess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProcess",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProcess"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsUnit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsUnit",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsUnit"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsState",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsState",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsState"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsGeography",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"effective\",\r",
											"        \"standard_taxonomy\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsGeography",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsGeography"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProduct",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProduct"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsProducer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProducer",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProducer"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsShareholder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsShareholder",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsShareholder"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsConcept",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsConcept"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "$filter (dictionary)",
					"item": [
						{
							"name": "ChemAssetsCapsProcess?$filter= name eq 'Fermentation' or row_id eq 901",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=name eq 'Fermentation' or row_id eq 901)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name === \"Fermentation\" || item.row_id === 901).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProcess?$filter= name eq 'Fermentation' or row_id eq 901",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProcess"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": " name eq 'Fermentation' or row_id eq 901"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsProcess?$filter=name ne 'Others'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=name ne 'Others')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name !== \"Others\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsProcess?$filter=name ne 'Others'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsProcess"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name ne 'Others'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsGeography?$filter=name eq 'Mongolia' and row_id eq 347",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"effective\",\r",
											"        \"standard_taxonomy\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected (filter=name eq 'Mongolia' and row_id eq 347)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name).to.eql(\"Mongolia\");\r",
											"        pm.expect(item.row_id).to.eql(347);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsGeography?$filter=name eq 'Mongolia' and row_id eq 347",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsGeography"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq 'Mongolia' and row_id eq 347"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$qurying data (all)",
					"item": [
						{
							"name": "ChemAssetsCapsConcept?$select=name, source_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"name\",\r",
											"        \"source_code\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Verify $select=name, source_code\r",
											"pm.test(\"Verify $select=name, source_code\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsConcept?$select=name, source_code",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsConcept"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$select",
											"value": "name, source_code"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsState?$top=10&$skip=5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Verify $top=3 and $skip=2\r",
											"pm.test(\"Verify $top=10 and $skip=5\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(10);\r",
											"\r",
											"// Count the occurrences of 'document_id'\r",
											"    var documentIdCount = responseBody.value.reduce(function (count, item) {\r",
											"        return count + (item.hasOwnProperty('document_id') ? 1 : 0);\r",
											"    }, 0);\r",
											"    \r",
											"    pm.expect(documentIdCount).to.equal(10);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsState?$top=10&$skip=5",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsState"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "10"
										},
										{
											"key": "$skip",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsUnit?$search=Dry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name.toLowerCase()).to.include(\"dry\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsUnit?$search=Dry",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsUnit"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$search",
											"value": "Dry"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsShareholder?$orderby=row_id desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Validate order by condition ($orderby=row_id desc)\r",
											"pm.test(\"Order by condition works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var previousRowId = Number.MAX_SAFE_INTEGER;\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id).to.be.at.most(previousRowId);\r",
											"        previousRowId = item.row_id;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsShareholder?$orderby=row_id desc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsShareholder"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$orderby",
											"value": "row_id desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsUnit?$count=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.count\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"@odata.context\",\r",
											"        \"@odata.count\",\r",
											"        \"value\"\r",
											"    ];\r",
											"    \r",
											"    pm.expect(Object.keys(responseBody)).to.eql(expectedProperties);\r",
											"});\r",
											"\r",
											"// TEST 4: Verify $count=true\r",
											"pm.test(\"Verify $count=true\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.count\", responseBody.value.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsUnit?$count=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsUnit"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$count",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemAssetsCapsState?$top=3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"row_id\",\r",
											"        \"name\",\r",
											"        \"display_name\",\r",
											"        \"unique_name\",\r",
											"        \"source_code\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemAssetsCapsState?$top=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemAssetsCapsState"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Capacity",
			"item": [
				{
					"name": "All",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"// New test for \"observations@odata.navigationLink\"\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											" // New test for \"observations@odata.navigationLink\"\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"// New test for \"observations@odata.navigationLink\"\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"\r",
											"// New test for \"observations@odata.navigationLink\"\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$filter",
					"item": [
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose (process ne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify filter works as expected ($filter=process ne 'Nitrobenzene')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.process !== \"Nitrobenzene\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$filter=process ne 'Nitrobenzene'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "process ne 'Nitrobenzene'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce (product eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"// Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected (filter=product eq 'Benzene')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.product).to.eql(\"Benzene\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$filter=product eq 'Benzene'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "product eq 'Benzene'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose (producer AND city)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=producer eq 'Arclin Inc.' and city eq 'Andalusia')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.producer).to.eql(\"Arclin Inc.\");\r",
											"        pm.expect(item.city).to.eql(\"Andalusia\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$filter=producer eq 'Arclin Inc.' and city eq 'Andalusia'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "producer eq 'Arclin Inc.' and city eq 'Andalusia'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce (origin_id OR ownership)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=origin_id eq '9142' or ownership eq '100.00 %')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.origin_id === \"9142\" || item.ownership === \"100.00 %\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$filter=origin_id eq '9142' or ownership eq '100.00 %'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "origin_id eq '9142' or ownership eq '100.00 %'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$expand",
					"item": [
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(*) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$expand=*",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(observations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$expand=observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(*)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$expand=*",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(observations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$expand=observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$qurying data",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=6&skip=3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(6);\r",
											"\r",
											"// Count the occurrences of 'source_id'\r",
											"    var sourceIdCount = responseBody.value.reduce(function (count, item) {\r",
											"        return count + (item.hasOwnProperty('source_id') ? 1 : 0);\r",
											"    }, 0);\r",
											"    \r",
											"    pm.expect(sourceIdCount).to.equal(6);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=6&$skip=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "6"
										},
										{
											"key": "$skip",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose (order by)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Verify that $orderby=source_id desc works\r",
											"pm.test(\"$orderby=source_id desc works correctly\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var data = responseBody.value;\r",
											"    \r",
											"    // Check if data is sorted in descending order based on alphanumeric source_id\r",
											"    for (var i = 0; i < data.length - 1; i++) {\r",
											"        // Convert the source_id values to strings for comparison\r",
											"        var sourceId1 = String(data[i].source_id);\r",
											"        var sourceId2 = String(data[i + 1].source_id);\r",
											"        \r",
											"        // Perform a string comparison\r",
											"        pm.expect(sourceId1.localeCompare(sourceId2)).to.be.at.least(0);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$orderby=source_id desc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$orderby",
											"value": "source_id desc"
										},
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce ($count = true)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.count\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"ownership\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$count=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$count",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce($search)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.city.toLowerCase()).to.include(\"seosan\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$search=Seosan",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$search",
											"value": "Seosan"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(order by)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$orderby=source_id desc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$orderby",
											"value": "source_id desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose($select)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"product\",\r",
											"        \"producer\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$select=product, producer",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$select",
											"value": "product, producer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$count",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(count)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(count)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(count)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(count)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$expand + filters",
					"item": [
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(observations+date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$expand=observations($select=date)",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations($select=date)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(observations+orderby)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$expand=observations($orderby=value desc)",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations($orderby=value desc)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(observations+top)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$expand=observations&$top=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "observations"
										},
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(observations+filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$expand=observations&$filter=region_name eq 'Northeast Asia'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "observations"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "region_name eq 'Northeast Asia'"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Mass price",
			"item": [
				{
					"name": "All collection",
					"item": [
						{
							"name": "ChemicalMasPricesCurrencyPerUnit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dictionary_TDP_Frequency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/Dictionary_TDP_Frequency",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"Dictionary_TDP_Frequency"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesTerms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesTerms",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesTerms"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProduct",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesGrade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesSourceSystemRegion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											" });\r",
											"        // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProduct",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProduct"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "12345Gigi-y",
								"type": "string"
							},
							{
								"key": "username",
								"value": "amovsisyan@opisnet.com",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "$count",
					"item": [
						{
							"name": "ChemicalMasPricesProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProduct/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProduct",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesSourceSystemRegion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesSourceSystemRegion/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesSourceSystemRegion",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesGrade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dictionary_TDP_Frequency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/Dictionary_TDP_Frequency/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"Dictionary_TDP_Frequency",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesCurrencyPerUnit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit",
										"$count"
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesTerms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesTerms/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesTerms",
										"$count"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "12345Jiji-y",
								"type": "string"
							},
							{
								"key": "username",
								"value": "amovsisyan@opisnet.com",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "$filter",
					"item": [
						{
							"name": "Dictionary_TDP_Frequency (name or row_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name === 'Weekly - Monday' || item.row_id === 22).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/Dictionary_TDP_Frequency?$filter=name eq 'Weekly - Monday' or row_id eq  22",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"Dictionary_TDP_Frequency"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq 'Weekly - Monday' or row_id eq  22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept (by doc_id or row_id))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id === 544 || item.document_id === 'e29e84bc-1823-4156-8989-7c2e6f6dbbeb').to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$filter =row_id eq 544 or document_id eq  'e29e84bc-1823-4156-8989-7c2e6f6dbbeb'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$filter ",
											"value": "row_id eq 544 or document_id eq  'e29e84bc-1823-4156-8989-7c2e6f6dbbeb'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesCurrencyPerUnit (eq and)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id).to.eql(65);\r",
											"        pm.expect(item.name).to.eql(\"Rp per Liq Kg\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit?$filter=row_id eq 65 and name eq 'Rp per Liq Kg'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit"
									],
									"query": [
										{
											"key": "$filter",
											"value": "row_id eq 65 and name eq 'Rp per Liq Kg'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept (ne by name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.process !== \"Margin, pre tax - Extraction Market Value\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$filter= name ne 'Margin, pre tax - Extraction Market Value'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$filter",
											"value": " name ne 'Margin, pre tax - Extraction Market Value'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept (row_id equal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"         pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected (filter=row_id eq 220)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id).to.eql(220);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$filter=row_id eq 220",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$filter",
											"value": "row_id eq 220"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept (source code and name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_code).to.eql(\"Spot/Export GP-Homopolymer-Low\");\r",
											"        pm.expect(item.name).to.eql(\"Spot/Export GP-Homopolymer-Low\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$filter=source_code eq 'Spot/Export GP-Homopolymer-Low' and name eq 'Spot/Export GP-Homopolymer-Low'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$filter",
											"value": "source_code eq 'Spot/Export GP-Homopolymer-Low' and name eq 'Spot/Export GP-Homopolymer-Low'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesGrade (row_id eq))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"         pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected (filter=row_id eq 220)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name).to.eql('Butyl Rubber');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade?$filter=name eq 'Butyl Rubber'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq 'Butyl Rubber'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesCurrencyPerUnit (ne a source_code)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_code !== \"RM per Liquid Metric Ton\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit?$filter= source_code ne 'RM per Liquid Metric Ton'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit"
									],
									"query": [
										{
											"key": "$filter",
											"value": " source_code ne 'RM per Liquid Metric Ton'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesTerms (source_code eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"         pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected (filter=row_id eq 220)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name).to.eql(\"Ex Tank Jacksonville, FL\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesTerms?$filter=name eq 'Ex Tank Jacksonville, FL'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesTerms"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq 'Ex Tank Jacksonville, FL'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesGrade (eq and))",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_code).to.eql(\"MFA China\");\r",
											"        pm.expect(item.name).to.eql(\"MFA China\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade?$filter=source_code eq 'MFA China' and name eq 'MFA China'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade"
									],
									"query": [
										{
											"key": "$filter",
											"value": "source_code eq 'MFA China' and name eq 'MFA China'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesCurrencyPerUnit (eq or)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name === '%' || item.source_code === '%').to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit?$filter=name eq '%' or source_code eq  '%'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '%' or source_code eq  '%'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesCurrencyPerUnit (row_id eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"\r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item.source_code).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item.document_timestamp).to.be.a('string');\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected (filter=row_id eq 20)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id).to.eql(20);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesCurrencyPerUnit?$filter=row_id eq 20",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesCurrencyPerUnit"
									],
									"query": [
										{
											"key": "$filter",
											"value": "row_id eq 20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProduct (eq or)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_code === 'CFR Turkey' || item.name === 'CFR Mediterranean').to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade?$filter=source_code eq 'CFR Turkey' or name eq 'CFR Mediterranean'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade"
									],
									"query": [
										{
											"key": "$filter",
											"value": "source_code eq 'CFR Turkey' or name eq 'CFR Mediterranean'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesSourceSystemRegion (not equal)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name !== \"Russia\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesSourceSystemRegion?$filter= name ne 'Russia'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesSourceSystemRegion"
									],
									"query": [
										{
											"key": "$filter",
											"value": " name ne 'Russia'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Querying data",
					"item": [
						{
							"name": "ChemicalMasPricesTerms ($search by source_code)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value[0].source_code).to.eql(\"FD Nordic\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesTerms?$search=\"FD Nordic\"",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesTerms"
									],
									"query": [
										{
											"key": "$search",
											"value": "\"FD Nordic\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "MasPricesConcept (top&skip)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(5);\r",
											"\r",
											"// Count the occurrences of 'document_id'\r",
											"    var documentIdCount = responseBody.value.reduce(function (count, item) {\r",
											"        return count + (item.hasOwnProperty('document_id') ? 1 : 0);\r",
											"    }, 0);\r",
											"    \r",
											"    pm.expect(documentIdCount).to.equal(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$top=5&$skip=2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$top",
											"value": "5"
										},
										{
											"key": "$skip",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProduct ($select)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Check if @odata.count is a number\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"name\",\r",
											"        \"source_code\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProduct?$select=source_code, name",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProduct"
									],
									"query": [
										{
											"key": "$select",
											"value": "source_code, name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesGrade ($count=true)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Check if @odata.count is a number\r",
											"pm.test(\"Check if @odata.count is a number\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.count\");\r",
											"    pm.expect(responseBody[\"@odata.count\"]).to.be.a('number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesGrade?$count=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesGrade"
									],
									"query": [
										{
											"key": "$count",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dictionary_TDP_Frequency ($select by timestamp and doc_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Check if @odata.count is a number\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"document_id\",\r",
											"        \"document_timestamp\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/Dictionary_TDP_Frequency?$select=document_timestamp, document_id",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"Dictionary_TDP_Frequency"
									],
									"query": [
										{
											"key": "$select",
											"value": "document_timestamp, document_id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesConcept (top=5)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesConcept?$top=5",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesConcept"
									],
									"query": [
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesSourceSystemRegion ($search)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody[\"@odata.context\"]).to.be.a('string');\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"value\");\r",
											"    pm.expect(responseBody.value).to.be.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item.document_id).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item.row_id).to.be.a('number');\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item.name).to.be.a('string');\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"    });\r",
											"\r",
											"    // Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate filter works as expected \r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value[0].name).to.eql(\"Middle East\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesSourceSystemRegion?$search= Middle East",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesSourceSystemRegion"
									],
									"query": [
										{
											"key": "$search",
											"value": " Middle East"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345Gigi-y",
						"type": "string"
					},
					{
						"key": "username",
						"value": "amovsisyan@opisnet.com",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Navigation & Pagination",
			"item": [
				{
					"name": "All",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(next page)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=2000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=2000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=2000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$skiptoken=1000%2C4294967296000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "1000%2C4294967296000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(from 3000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=4000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=4000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=4000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$skiptoken=3000%2C12884901888000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "3000%2C12884901888000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(from 5000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=6000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=6000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=6000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$skiptoken=5000%2C21474836480000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "5000%2C21474836480000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(final)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" is not present\r",
											"pm.test(\"Verify '@odata.nextLink' is not present\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.not.have.property(\"@odata.nextLink\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$skiptoken=51000%2C219043332096000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "51000%2C219043332096000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$filter",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce (frequency eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"// Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected (filter=frequency 'Annual')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.frequency).to.eql(\"Annual\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$filter=frequency eq 'Annual'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "frequency eq 'Annual'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose (frequency AND concept)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=frequency eq 'Annual' and concept eq 'Close / Expand')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.frequency).to.eql(\"Annual\");\r",
											"        pm.expect(item.concept).to.eql(\"Expand / Close\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$filter=frequency eq 'Annual' and concept eq 'Expand / Close'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "frequency eq 'Annual' and concept eq 'Expand / Close'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce (concept OR ownership)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"// Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=concept eq 'Capacity to produce' or ownership eq '100.00 %')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.concept === 'Capacity to produce' || item.ownership === \"100.00 %\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$filter=concept eq 'Capacity to produce' or ownership eq '100.00 %'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "concept eq 'Capacity to produce' or ownership eq '100.00 %'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose (state ne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"// Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify filter works as expected ($filter=state ne null)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.state !== null).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$filter=state ne null",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "state ne null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce (frequency 2000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"// Check if @odata.count is available and greater than 1000 to expect @odata.nextLink\r",
											"    if (responseBody.hasOwnProperty(\"@odata.count\") && responseBody[\"@odata.count\"] > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=3000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=3000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=3000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected (filter=frequency eq 'Annual')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.frequency).to.eql(\"Annual\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$filter=frequency%20eq%20%27Annual%27&$skiptoken=2000%2C8589934592000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$filter",
											"value": "frequency%20eq%20%27Annual%27"
										},
										{
											"key": "$skiptoken",
											"value": "2000%2C8589934592000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose (3000frequency AND concept)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=4000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=4000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=4000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=frequency eq 'Annual' and concept eq 'Close / Expand')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.frequency).to.eql(\"Annual\");\r",
											"        pm.expect(item.concept).to.eql(\"Expand / Close\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$filter=frequency%20eq%20%27Annual%27%20and%20concept%20eq%20%27Expand%20%2F%20Close%27%20&$skiptoken=3000%2C12884901888000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$filter",
											"value": "frequency%20eq%20%27Annual%27%20and%20concept%20eq%20%27Expand%20%2F%20Close%27%20"
										},
										{
											"key": "$skiptoken",
											"value": "3000%2C12884901888000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce (10000concept OR ownership)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=11000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=11000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=11000\");\r",
											"});\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=concept eq 'Capacity to produce' or ownership eq '100.00 %')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.concept === 'Capacity to produce' || item.ownership === \"100.00 %\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$filter=concept%20eq%20%27Capacity%20to%20produce%27%20or%20ownership%20eq%20%27100.00%20%25%27&$skiptoken=10000%2C42949672960000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$filter",
											"value": "concept%20eq%20%27Capacity%20to%20produce%27%20or%20ownership%20eq%20%27100.00%20%25%27"
										},
										{
											"key": "$skiptoken",
											"value": "10000%2C42949672960000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose (5000state ne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=6000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=6000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=6000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify filter works as expected ($filter=state ne null)\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.state !== null).to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$filter=state%20ne%20null&$skiptoken=5000%2C21474836480000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$filter",
											"value": "state%20ne%20null"
										},
										{
											"key": "$skiptoken",
											"value": "5000%2C21474836480000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$expand",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(4000observations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=5000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=5000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=5000\");\r",
											"});\r",
											"\r",
											"// TEST 4: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$expand=observations&$skiptoken=4000%2C17179869184000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "observations"
										},
										{
											"key": "$skiptoken",
											"value": "4000%2C17179869184000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(10000*)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=11000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=11000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=11000\");\r",
											"});\r",
											"\r",
											"// TEST 4: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$expand=%2A&$skiptoken=10000%2C42949672960000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "%2A"
										},
										{
											"key": "$skiptoken",
											"value": "10000%2C42949672960000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(2000*)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=3000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=3000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=3000\");\r",
											"}); \r",
											"\r",
											"// TEST 4: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$expand=%2A&$skiptoken=2000%2C8589934592000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "%2A"
										},
										{
											"key": "$skiptoken",
											"value": "2000%2C8589934592000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(2000observations)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=2000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=2000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=2000\");\r",
											"}); \r",
											"\r",
											"// TEST 4: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$expand=observations&$skiptoken=1000%2C4294967296000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$expand",
											"value": "observations"
										},
										{
											"key": "$skiptoken",
											"value": "1000%2C4294967296000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(30000*)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=31000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=31000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=31000\");\r",
											"}); \r",
											"\r",
											"// TEST 4: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$skiptoken=30000%2C128849018880000%2C1000&$expand=%2A",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "30000%2C128849018880000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "%2A"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$qurying data",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(3000order by)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=4000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=4000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=4000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$orderby=source_id%20desc&$skiptoken=3000%2C12884901888000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$orderby",
											"value": "source_id%20desc"
										},
										{
											"key": "$skiptoken",
											"value": "3000%2C12884901888000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=999)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" is not present\r",
											"pm.test(\"Verify '@odata.nextLink' is not present\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.not.have.property(\"@odata.nextLink\");\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(999);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=999",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=1003&skip=3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=1000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=1000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=1000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(1000);\r",
											"\r",
											"// Count the occurrences of 'source_id'\r",
											"    var sourceIdCount = responseBody.value.reduce(function (count, item) {\r",
											"        return count + (item.hasOwnProperty('source_id') ? 1 : 0);\r",
											"    }, 0);\r",
											"    \r",
											"    pm.expect(sourceIdCount).to.equal(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=1003&$skip=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$top",
											"value": "1003"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce (5000$count = true)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.count\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"ownership\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=6000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=6000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=6000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified?$count=true&$skiptoken=5000%2C21474836480000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$count",
											"value": "true"
										},
										{
											"key": "$skiptoken",
											"value": "5000%2C21474836480000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(3000$select)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"\r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    var expectedProperties = [\r",
											"        \"product\",\r",
											"        \"producer\"\r",
											"    ];\r",
											"\r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 4: Verify \"@odata.nextLink\" contains \"$skiptoken=4000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=4000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=4000\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified?$select=product%2C%20producer&$skiptoken=3000%2C12884901888000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$select",
											"value": "product%2C%20producer"
										},
										{
											"key": "$skiptoken",
											"value": "3000%2C12884901888000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(2000$search)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response contains the expected concept value\r",
											"    pm.expect(responseBody.value[0].concept.toLowerCase()).to.include(\"capacity\");\r",
											"});\r",
											"\r",
											"// TEST 4: Verify \"@odata.nextLink\" contains \"$skiptoken=2000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=2000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=2000\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified?$search=Capacity&$skiptoken=1000%2C4294967296000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$search",
											"value": "Capacity"
										},
										{
											"key": "$skiptoken",
											"value": "1000%2C4294967296000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose (4000order by)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=5000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=5000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=5000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$orderby=source_id%20desc&$skiptoken=4000%2C17179869184000%2C1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$orderby",
											"value": "source_id%20desc"
										},
										{
											"key": "$skiptoken",
											"value": "4000%2C17179869184000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=1000)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" is not present\r",
											"pm.test(\"Verify '@odata.nextLink' is not present\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.not.have.property(\"@odata.nextLink\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=1000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(top=1001)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" contains \"$skiptoken=1000\"\r",
											"pm.test(\"Verify '@odata.nextLink' contains '$skiptoken=1000'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\").that.includes(\"$skiptoken=1000\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$top=1001",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "1001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(next top=1002)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"origin_id\");\r",
											"        pm.expect(item).to.have.property(\"concept\");\r",
											"        pm.expect(item).to.have.property(\"product\");\r",
											"        pm.expect(item).to.have.property(\"process\");\r",
											"        pm.expect(item).to.have.property(\"producer\");\r",
											"        pm.expect(item).to.have.property(\"state\");\r",
											"        pm.expect(item).to.have.property(\"unit\");\r",
											"        pm.expect(item).to.have.property(\"city\");\r",
											"        pm.expect(item).to.have.property(\"region_name\");\r",
											"        pm.expect(item).to.have.property(\"remarks\");\r",
											"        pm.expect(item).to.have.property(\"frequency\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"country_territory\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify \"@odata.nextLink\" is not present\r",
											"pm.test(\"Verify '@odata.nextLink' is not present\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.not.have.property(\"@odata.nextLink\");\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified?$skiptoken=1000%2C4294967296000%2C1000&$top=1002",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified"
									],
									"query": [
										{
											"key": "$skiptoken",
											"value": "1000%2C4294967296000%2C1000"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$top",
											"value": "1002"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "observations",
					"item": [
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(210)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    // Loop through each observation\r",
											"    responseBody.value.forEach(function (observation) {\r",
											"        // Check if each observation has the required properties\r",
											"        pm.expect(observation).to.have.property(\"date\").that.is.a('string');\r",
											"        pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('210|BZE|BZE_6|19276|ARG|000MetricTons')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('210|BZE|BZE_6|19276|ARG|000MetricTons')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(24676_source_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.a('string');\r",
											"    \r",
											"    // Check if responseBody.value is an array\r",
											"    if (Array.isArray(responseBody.value)) {\r",
											"        // Loop through each observation\r",
											"        responseBody.value.forEach(function (observation) {\r",
											"            // Check if each observation has the required properties\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('string');\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"ERROR: responseBody.value is not an array\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('24676|FGL|FGL_2|20452|INO|000MetricTons')/source_id",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('24676|FGL|FGL_2|20452|INO|000MetricTons')",
										"source_id"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_CapacityToProduce(27122_ONE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"source_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"origin_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"concept\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"product\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"process\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"producer\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"state\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"unit\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"city\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"region_name\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"remarks\").that.is.null;\r",
											"    pm.expect(responseBody).to.have.property(\"frequency\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"start_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"end_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"last_update_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"datagroup\").that.is.an('array');\r",
											"    pm.expect(responseBody).to.have.property(\"country_territory\").that.is.a('string');\r",
											"    \r",
											"    // Check if datagroup array has at least one item\r",
											"    pm.expect(responseBody.datagroup).to.have.length.above(0);\r",
											"\r",
											"    // Loop through datagroup array and check each item\r",
											"    responseBody.datagroup.forEach(function (item) {\r",
											"        pm.expect(item).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('27122|RGP|RGP_1|231120102641478|ITA|000MetricTons')",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_CapacityToProduce_API_Data_Simplified('27122|RGP|RGP_1|231120102641478|ITA|000MetricTons')"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(39474)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    // Loop through each observation\r",
											"    responseBody.value.forEach(function (observation) {\r",
											"        // Check if each observation has the required properties\r",
											"        pm.expect(observation).to.have.property(\"date\").that.is.a('string');\r",
											"        pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('39474|EXYL|EXYL_1|7406|SIN|000MetricTons|_Expand')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('39474|EXYL|EXYL_1|7406|SIN|000MetricTons|_Expand')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(51386_product)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.a('string');\r",
											"    \r",
											"    // Check if responseBody.value is an array\r",
											"    if (Array.isArray(responseBody.value)) {\r",
											"        // Loop through each observation\r",
											"        responseBody.value.forEach(function (observation) {\r",
											"            // Check if each observation has the required properties\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('string');\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"ERROR: responseBody.value is not an array\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('51386|PVC|PVC_1|24385|USA|000MetricTons|_Expand')/product",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('51386|PVC|PVC_1|24385|USA|000MetricTons|_Expand')",
										"product"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByCompany_ExpandClose(34720_ONE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"source_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"origin_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"concept\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"product\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"process\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"producer\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"state\");\r",
											"    pm.expect(responseBody).to.have.property(\"unit\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"city\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"region_name\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"remarks\");\r",
											"    pm.expect(responseBody).to.have.property(\"frequency\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"start_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"end_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"last_update_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"datagroup\").that.is.an('array');\r",
											"    pm.expect(responseBody).to.have.property(\"country_territory\").that.is.a('string');\r",
											"    \r",
											"    // Check if datagroup array has at least one item\r",
											"    pm.expect(responseBody.datagroup).to.have.length.above(0);\r",
											"\r",
											"    // Loop through datagroup array and check each item\r",
											"    responseBody.datagroup.forEach(function (item) {\r",
											"        pm.expect(item).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('34720|LDP|LDP_2|19899|BLR|000MetricTons|_Expand')",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByCompany_ExpandClose_API_Data_Simplified('34720|LDP|LDP_2|19899|BLR|000MetricTons|_Expand')"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(30730)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    // Loop through each observation\r",
											"    responseBody.value.forEach(function (observation) {\r",
											"        // Check if each observation has the required properties\r",
											"        pm.expect(observation).to.have.property(\"date\").that.is.a('string');\r",
											"        pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|15091|30730|CHL|CHL_2|15084|KOS|000MetricTons|_Expand')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|15091|30730|CHL|CHL_2|15084|KOS|000MetricTons|_Expand')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(318262_shareholder)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.a('string');\r",
											"    \r",
											"    // Check if responseBody.value is an array\r",
											"    if (Array.isArray(responseBody.value)) {\r",
											"        // Loop through each observation\r",
											"        responseBody.value.forEach(function (observation) {\r",
											"            // Check if each observation has the required properties\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('string');\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"ERROR: responseBody.value is not an array\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|18262|22887|FRM|FRM_1|18262|IND|000MetricTons|_Expand')/shareholder",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|18262|22887|FRM|FRM_1|18262|IND|000MetricTons|_Expand')",
										"shareholder"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_ExpandClose(32440_state)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.a('string');\r",
											"    \r",
											"    // Check if responseBody.value is an array\r",
											"    if (Array.isArray(responseBody.value)) {\r",
											"        // Loop through each observation\r",
											"        responseBody.value.forEach(function (observation) {\r",
											"            // Check if each observation has the required properties\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('string');\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"ERROR: responseBody.value is not an array\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|090322123534148|32440|CPR|CPR_1|28275|MEX|000MetricTons|_Expand')/state",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_ExpandClose_API_Data_Simplified('ByShareholder|090322123534148|32440|CPR|CPR_1|28275|MEX|000MetricTons|_Expand')",
										"state"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(28131)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    // Loop through each observation\r",
											"    responseBody.value.forEach(function (observation) {\r",
											"        // Check if each observation has the required properties\r",
											"        pm.expect(observation).to.have.property(\"date\").that.is.a('string');\r",
											"        pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|16615|28131|ETH|ETH_5|16609|JAP|000MetricTons')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|16615|28131|ETH|ETH_5|16609|JAP|000MetricTons')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(25276_producer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.a('string');\r",
											"    \r",
											"    // Check if responseBody.value is an array\r",
											"    if (Array.isArray(responseBody.value)) {\r",
											"        // Loop through each observation\r",
											"        responseBody.value.forEach(function (observation) {\r",
											"            // Check if each observation has the required properties\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('string');\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"ERROR: responseBody.value is not an array\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|25276|26089|ACF|ACF_1|25276|ITA|000MetricTons')/producer",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|25276|26089|ACF|ACF_1|25276|ITA|000MetricTons')",
										"producer"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalCapacityByShareholder_CapacityToProduce(25205_ONE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the response has the expected structure\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"source_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"origin_id\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"concept\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"product\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"process\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"producer\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"state\");\r",
											"    pm.expect(responseBody).to.have.property(\"unit\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"city\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"region_name\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"remarks\");\r",
											"    pm.expect(responseBody).to.have.property(\"frequency\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"start_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"end_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"last_update_date\").that.is.a('string');\r",
											"    pm.expect(responseBody).to.have.property(\"datagroup\").that.is.an('array');\r",
											"    pm.expect(responseBody).to.have.property(\"country_territory\").that.is.a('string');\r",
											"    \r",
											"    // Check if datagroup array has at least one item\r",
											"    pm.expect(responseBody.datagroup).to.have.length.above(0);\r",
											"\r",
											"    // Loop through datagroup array and check each item\r",
											"    responseBody.datagroup.forEach(function (item) {\r",
											"        pm.expect(item).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|25205|1932|ACM|ACM_1|25205|BRA|000MetricTons')",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalCapacityByShareholder_CapacityToProduce_API_Data_Simplified('ByShareholder|25205|1932|ACM|ACM_1|25205|BRA|000MetricTons')"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ChemicalPriceAndEconomics",
			"item": [
				{
					"name": "All",
					"item": [
						{
							"name": "ChemicalPriceAndEconomics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\");\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$count",
					"item": [
						{
							"name": "ChemicalPriceAndEconomics/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade/$count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response contains a numeric number\r",
											"pm.test(\"Response contains a numeric value\", function () {\r",
											"    // Get the response body as text\r",
											"    var responseBodyText = pm.response.text();\r",
											"\r",
											"    // Define a regular expression pattern to match numbers\r",
											"    var numericPattern = /^[0-9]+$/;\r",
											"\r",
											"    // Check if the response body matches the numeric pattern\r",
											"    pm.expect(responseBodyText).to.match(numericPattern);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade/$count",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade",
										"$count"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$filter",
					"item": [
						{
							"name": "ChemicalPriceAndEconomics (eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"datagroup\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"geographic_location\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_source_code\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"mnemonic\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"short_label\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"end_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"last_update_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"last_update\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected (filter= mnemonic eq 'ETHNAM1026')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.mnemonic).to.eql('ETHNAM1026');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$filter= mnemonic eq 'ETHNAM1026'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": " mnemonic eq 'ETHNAM1026'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics (and)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"datagroup\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"geographic_location\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_source_code\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"mnemonic\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"short_label\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"end_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"last_update_date\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"last_update\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=producer eq 'Arclin Inc.' and city eq 'Andalusia')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_id ).to.eql(\"5216\");\r",
											"        pm.expect(item.product_row_id ).to.eql(\"114\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$filter=source_id eq '1318' and product_row_id eq '64'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source_id eq '1318' and product_row_id eq '64'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics (or)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"datagroup\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"geographic_location\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_source_code\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"category_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"type_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"terms_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"concept_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"mnemonic\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\").that.is.a('string');\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=geographic_location eq 'Northern America' or product_row_id eq '79')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.geographic_location === \"Northern America\" || item.product_row_id === \"79\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$filter=geographic_location eq 'Northern America' or product_row_id eq '79'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "geographic_location eq 'Northern America' or product_row_id eq '79'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics (ne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\");\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify filter works as expected ($filter=frequency_name ne 'Annual')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.frequency_name !== \"Annual\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$filter=frequency_name ne 'Annual'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "frequency_name ne 'Annual'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade (eq)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=name eq 'Staple Fiber')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.name).to.eql('Staple Fiber');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$filter=name eq 'Staple Fiber'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq 'Staple Fiber'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade (and)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Validate filter works as expected ($filter=producer eq 'Arclin Inc.' and city eq 'Andalusia')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.row_id ).to.eql(831);\r",
											"        pm.expect(item.unique_name).to.eql(null);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$filter=row_id eq 831 and unique_name eq null",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "row_id eq 831 and unique_name eq null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade (ne)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify filter works as expected ($filter=source_code ne 'STMC')\r",
											"pm.test(\"Filter works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item.source_code !== \"STMC\").to.be.true;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$filter=source_code ne 'STMC'",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source_code ne 'STMC'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$expand",
					"item": [
						{
							"name": "ChemicalPriceAndEconomics?$expand=*",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$expand=*",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$expand=observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        item.observations.forEach(function (observation) {\r",
											"            pm.expect(observation).to.have.property(\"date\");\r",
											"            pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$expand=observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics('3400')/observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"}); \r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check if \"observations\" property exists and is an array\r",
											"        if (item.observations && Array.isArray(item.observations)) {\r",
											"            item.observations.forEach(function (observation) {\r",
											"                pm.expect(observation).to.have.property(\"date\");\r",
											"                pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics('10407')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics('10407')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics('276')/observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check for the presence of specific properties\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"}); \r",
											"\r",
											"// TEST 3: Verify that observations have the correct structure\r",
											"pm.test(\"Observations have correct structure\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check if \"observations\" property exists and is an array\r",
											"        if (item.observations && Array.isArray(item.observations)) {\r",
											"            item.observations.forEach(function (observation) {\r",
											"                pm.expect(observation).to.have.property(\"date\");\r",
											"                pm.expect(observation).to.have.property(\"value\").that.is.a('number');\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics('10455')/observations",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics('10455')",
										"observations"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "$qurying data",
					"item": [
						{
							"name": "ChemicalPriceAndEconomics?$orderby=end_date desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Observations navigationLink property is valid\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$orderby=end_date desc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$orderby",
											"value": "end_date desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$top=20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(20);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$top=20&$count=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$top",
											"value": "20"
										},
										{
											"key": "$count",
											"value": "true"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$expand=&$select=grade_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$select=grade_name&$expand=*",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$select",
											"value": "grade_name"
										},
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$count=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"shareholder\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"ownership\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$count=true",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$count",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        if (item.city !== undefined) {\r",
											"            pm.expect(item.city.toLowerCase()).to.include(\"MONT\");\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$search=MONT",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$search",
											"value": "MONT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade?$select,&$top=3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=12\r",
											"pm.test(\"Verify $top=12\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(12);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$top=12",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$select=product_name, flags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"\r",
											"    });\r",
											"});\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"product_name\",\r",
											"        \"flags\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$select=product_name, flags",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$select",
											"value": "product_name, flags"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$top=1002&$skip=100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$skip=100&$top=1002",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$skip",
											"value": "100"
										},
										{
											"key": "$top",
											"value": "1002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade?$search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Verify that the response contains data when searching for \"ROOT\"\r",
											"pm.test(\"Check if the response contains data when searching for 'ROOT'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if the \"value\" array in the response contains data\r",
											"    pm.expect(responseBody.value.length).to.be.above(0);\r",
											"\r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check if the response data contains \"ROOT\" in any property\r",
											"        for (var key in item) {\r",
											"            if (item[key] && item[key].toString().includes(\"ROOT\")) {\r",
											"                pm.expect(item[key].toString()).to.include(\"ROOT\");\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"});\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$search=ROOT",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$search",
											"value": "ROOT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalMasPricesProductGrade?$skip=7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"row_id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"display_name\");\r",
											"        pm.expect(item).to.have.property(\"unique_name\");\r",
											"        pm.expect(item).to.have.property(\"effective\");\r",
											"        pm.expect(item).to.have.property(\"standard_taxonomy\");\r",
											"        pm.expect(item).to.have.property(\"source_code\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy\"\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"value\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"order\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"path\").that.is.an('array');\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"source_code\");\r",
											"        pm.expect(item.standard_taxonomy).to.have.property(\"ancestor\").that.is.an('array');\r",
											"        \r",
											"        // Validate nested properties inside \"standard_taxonomy.ancestor\"\r",
											"        item.standard_taxonomy.ancestor.forEach(function (ancestorItem) {\r",
											"            pm.expect(ancestorItem).to.have.property(\"row_id\");\r",
											"            pm.expect(ancestorItem).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=7\r",
											"pm.test(\"Verify $top=3\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.value).to.have.length.of.at.most(7);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalMasPricesProductGrade?$top=7&$skip=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalMasPricesProductGrade"
									],
									"query": [
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$top",
											"value": "7"
										},
										{
											"key": "$skip",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$search&select",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        if (item.city !== undefined) {\r",
											"            pm.expect(item.city.toLowerCase()).to.include(\"MONT\");\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$search=MONT&$select=concept_name",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$search",
											"value": "MONT"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$select",
											"value": "concept_name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$observations+filter date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// TEST 3: Verify search query works as expected\r",
											"pm.test(\"Search query works as expected\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        if (item.city !== undefined) {\r",
											"            pm.expect(item.city.toLowerCase()).to.include(\"MONT\");\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$expand=observations($filter=date eq 2000-01-01)",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$expand",
											"value": "observations($filter=date eq 2000-01-01)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$select=product_name, flags&search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"\r",
											"    });\r",
											"});\r",
											"// TEST 3: Verify order of properties\r",
											"pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"product_name\",\r",
											"        \"flags\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$select=product_name, flags&$search=Paraxylene",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$select",
											"value": "product_name, flags"
										},
										{
											"key": null,
											"value": null,
											"disabled": true
										},
										{
											"key": "$search",
											"value": "Paraxylene"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics?$orderby=end_date desc&search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"    pm.expect(responseBody).to.have.property(\"value\").that.is.an('array');\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"document_id\");\r",
											"        pm.expect(item).to.have.property(\"source_id\");\r",
											"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
											"        pm.expect(item).to.have.property(\"datagroup\");\r",
											"        pm.expect(item).to.have.property(\"geographic_location\");\r",
											"        pm.expect(item).to.have.property(\"product_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_name\");\r",
											"        pm.expect(item).to.have.property(\"product_source_code\");\r",
											"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"grade_name\");\r",
											"        pm.expect(item).to.have.property(\"category_row_id\");\r",
											"        pm.expect(item).to.have.property(\"category_name\");\r",
											"        pm.expect(item).to.have.property(\"type_row_id\");\r",
											"        pm.expect(item).to.have.property(\"type_name\");\r",
											"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
											"        pm.expect(item).to.have.property(\"terms_name\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
											"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
											"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
											"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
											"        pm.expect(item).to.have.property(\"concept_name\");\r",
											"        pm.expect(item).to.have.property(\"mnemonic\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
											"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
											"        pm.expect(item).to.have.property(\"short_label\");\r",
											"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
											"        pm.expect(item).to.have.property(\"frequency_name\");\r",
											"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
											"        pm.expect(item).to.have.property(\"flags\").that.is.an('array');\r",
											"        pm.expect(item).to.have.property(\"start_date\");\r",
											"        pm.expect(item).to.have.property(\"end_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update_date\");\r",
											"        pm.expect(item).to.have.property(\"last_update\");\r",
											"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
											"        pm.expect(item).to.have.property(\"long_label\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/\r",
											"\r",
											"// TEST 4: Verify $top=3\r",
											"pm.test(\"Observations navigationLink property is valid\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
											"        pm.expect(item[\"observations@odata.navigationLink\"]).to.not.be.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$search=Domestic&$orderby=end_date desc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$search",
											"value": "Domestic"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$orderby",
											"value": "end_date desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ChemicalPriceAndEconomics(select&order)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// TEST 1: Validate status code\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// TEST 2: Validate response structure and @odata.nextLink\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    // Check if @odata.nextLink exists when total items are > 1000\r",
											"    if (responseBody.value.length > 1000) {\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
											"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
											"    }\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        // Check for the presence of properties within each item in the \"value\" array\r",
											"        pm.expect(item).to.have.property(\"source_id\").that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"// TEST 3: Validate order of properties\r",
											"/*pm.test(\"Order of properties is correct\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    var expectedProperties = [\r",
											"        \"observations@odata.navigationLink\",\r",
											"        \"source_id\",\r",
											"        \"origin_id\",\r",
											"        \"concept\",\r",
											"        \"product\",\r",
											"        \"process\",\r",
											"        \"producer\",\r",
											"        \"state\",\r",
											"        \"unit\",\r",
											"        \"city\",\r",
											"        \"region_name\",\r",
											"        \"remarks\",\r",
											"        \"frequency\",\r",
											"        \"start_date\",\r",
											"        \"end_date\",\r",
											"        \"last_update_date\",\r",
											"        \"datagroup\",\r",
											"        \"country_territory\"\r",
											"    ];\r",
											"    \r",
											"    responseBody.value.forEach(function (item) {\r",
											"        var properties = Object.keys(item);\r",
											"        pm.expect(properties).to.eql(expectedProperties);\r",
											"    });\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "PRE_5135967_me",
											"type": "string"
										},
										{
											"key": "username",
											"value": "sshedava@opisnet.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/odata/ChemicalPriceAndEconomics?$select=source_id&$orderby=source_id asc",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"odata",
										"ChemicalPriceAndEconomics"
									],
									"query": [
										{
											"key": "$select",
											"value": "source_id"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "$orderby",
											"value": "source_id asc"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Chemial - Documents",
			"item": [
				{
					"name": "dictionaryvalues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST 1: Validate status code\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// TEST 2: Validate response structure and @odata.nextLink\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    \r",
									"    // Check if @odata.nextLink exists when total items are > 1000\r",
									"    if (responseBody.value.length > 1000) {\r",
									"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
									"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
									"    }\r",
									"    \r",
									"    responseBody.value.forEach(function (item) {\r",
									"        // Check for the presence of properties within each item in the \"value\" array\r",
									"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
									"        pm.expect(item).to.have.property(\"document_id\");\r",
									"        pm.expect(item).to.have.property(\"source_id\");\r",
									"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
									"        pm.expect(item).to.have.property(\"datagroup\");\r",
									"        pm.expect(item).to.have.property(\"geographic_location\");\r",
									"        pm.expect(item).to.have.property(\"product_row_id\");\r",
									"        pm.expect(item).to.have.property(\"product_name\");\r",
									"        pm.expect(item).to.have.property(\"product_source_code\");\r",
									"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
									"        pm.expect(item).to.have.property(\"grade_name\");\r",
									"        pm.expect(item).to.have.property(\"category_row_id\");\r",
									"        pm.expect(item).to.have.property(\"category_name\");\r",
									"        pm.expect(item).to.have.property(\"type_row_id\");\r",
									"        pm.expect(item).to.have.property(\"type_name\");\r",
									"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
									"        pm.expect(item).to.have.property(\"terms_name\");\r",
									"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
									"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
									"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
									"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
									"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
									"        pm.expect(item).to.have.property(\"concept_name\");\r",
									"        pm.expect(item).to.have.property(\"mnemonic\");\r",
									"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
									"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
									"        pm.expect(item).to.have.property(\"short_label\");\r",
									"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
									"        pm.expect(item).to.have.property(\"frequency_name\");\r",
									"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
									"        pm.expect(item).to.have.property(\"flags\");\r",
									"        pm.expect(item).to.have.property(\"start_date\");\r",
									"        pm.expect(item).to.have.property(\"end_date\");\r",
									"        pm.expect(item).to.have.property(\"last_update_date\");\r",
									"        pm.expect(item).to.have.property(\"last_update\");\r",
									"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
									"        pm.expect(item).to.have.property(\"long_label\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// TEST 3: Validate order of properties\r",
									"/*pm.test(\"Order of properties is correct\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    \r",
									"    var expectedProperties = [\r",
									"        \"observations@odata.navigationLink\",\r",
									"        \"source_id\",\r",
									"        \"origin_id\",\r",
									"        \"concept\",\r",
									"        \"product\",\r",
									"        \"process\",\r",
									"        \"producer\",\r",
									"        \"state\",\r",
									"        \"unit\",\r",
									"        \"city\",\r",
									"        \"region_name\",\r",
									"        \"remarks\",\r",
									"        \"frequency\",\r",
									"        \"start_date\",\r",
									"        \"end_date\",\r",
									"        \"last_update_date\",\r",
									"        \"datagroup\",\r",
									"        \"country_territory\"\r",
									"    ];\r",
									"    \r",
									"    responseBody.value.forEach(function (item) {\r",
									"        var properties = Object.keys(item);\r",
									"        pm.expect(properties).to.eql(expectedProperties);\r",
									"    });\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRE_5135967_me",
									"type": "string"
								},
								{
									"key": "username",
									"value": "sshedava@opisnet.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://client.chemicalmarketanalytics.com/proxy/bcidataapi/chemical/v1/dictionaryvalues?dictionaryName=ContentType",
							"protocol": "https",
							"host": [
								"client",
								"chemicalmarketanalytics",
								"com"
							],
							"path": [
								"proxy",
								"bcidataapi",
								"chemical",
								"v1",
								"dictionaryvalues"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								},
								{
									"key": "dictionaryName",
									"value": "ContentType"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dictionaries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST 1: Validate status code\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// TEST 2: Validate response structure and @odata.nextLink\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    \r",
									"    // Check if @odata.nextLink exists when total items are > 1000\r",
									"    if (responseBody.value.length > 1000) {\r",
									"        pm.expect(responseBody).to.have.property(\"@odata.context\");\r",
									"        pm.expect(responseBody).to.have.property(\"@odata.nextLink\");\r",
									"    }\r",
									"    \r",
									"    responseBody.value.forEach(function (item) {\r",
									"        // Check for the presence of properties within each item in the \"value\" array\r",
									"        pm.expect(item).to.have.property(\"observations@odata.navigationLink\").that.is.a('string');\r",
									"        pm.expect(item).to.have.property(\"document_id\");\r",
									"        pm.expect(item).to.have.property(\"source_id\");\r",
									"        pm.expect(item).to.have.property(\"document_timestamp\");\r",
									"        pm.expect(item).to.have.property(\"datagroup\");\r",
									"        pm.expect(item).to.have.property(\"geographic_location\");\r",
									"        pm.expect(item).to.have.property(\"product_row_id\");\r",
									"        pm.expect(item).to.have.property(\"product_name\");\r",
									"        pm.expect(item).to.have.property(\"product_source_code\");\r",
									"        pm.expect(item).to.have.property(\"grade_row_id\");\r",
									"        pm.expect(item).to.have.property(\"grade_name\");\r",
									"        pm.expect(item).to.have.property(\"category_row_id\");\r",
									"        pm.expect(item).to.have.property(\"category_name\");\r",
									"        pm.expect(item).to.have.property(\"type_row_id\");\r",
									"        pm.expect(item).to.have.property(\"type_name\");\r",
									"        pm.expect(item).to.have.property(\"terms_row_id\");\r",
									"        pm.expect(item).to.have.property(\"terms_name\");\r",
									"        pm.expect(item).to.have.property(\"source_system_region_row_id\");\r",
									"        pm.expect(item).to.have.property(\"source_system_region_name\");\r",
									"        pm.expect(item).to.have.property(\"currency_per_unit_row_id\");\r",
									"        pm.expect(item).to.have.property(\"currency_per_unit_name\");\r",
									"        pm.expect(item).to.have.property(\"concept_row_id\");\r",
									"        pm.expect(item).to.have.property(\"concept_name\");\r",
									"        pm.expect(item).to.have.property(\"mnemonic\");\r",
									"        pm.expect(item).to.have.property(\"product_grade_row_id\");\r",
									"        pm.expect(item).to.have.property(\"product_grade_name\");\r",
									"        pm.expect(item).to.have.property(\"short_label\");\r",
									"        pm.expect(item).to.have.property(\"frequency_row_id\");\r",
									"        pm.expect(item).to.have.property(\"frequency_name\");\r",
									"        pm.expect(item).to.have.property(\"frequency_source_code\");\r",
									"        pm.expect(item).to.have.property(\"flags\");\r",
									"        pm.expect(item).to.have.property(\"start_date\");\r",
									"        pm.expect(item).to.have.property(\"end_date\");\r",
									"        pm.expect(item).to.have.property(\"last_update_date\");\r",
									"        pm.expect(item).to.have.property(\"last_update\");\r",
									"        pm.expect(item).to.have.property(\"old_price_header_id\");\r",
									"        pm.expect(item).to.have.property(\"long_label\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// TEST 3: Validate order of properties\r",
									"/*pm.test(\"Order of properties is correct\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    \r",
									"    var expectedProperties = [\r",
									"        \"observations@odata.navigationLink\",\r",
									"        \"source_id\",\r",
									"        \"origin_id\",\r",
									"        \"concept\",\r",
									"        \"product\",\r",
									"        \"process\",\r",
									"        \"producer\",\r",
									"        \"state\",\r",
									"        \"unit\",\r",
									"        \"city\",\r",
									"        \"region_name\",\r",
									"        \"remarks\",\r",
									"        \"frequency\",\r",
									"        \"start_date\",\r",
									"        \"end_date\",\r",
									"        \"last_update_date\",\r",
									"        \"datagroup\",\r",
									"        \"country_territory\"\r",
									"    ];\r",
									"    \r",
									"    responseBody.value.forEach(function (item) {\r",
									"        var properties = Object.keys(item);\r",
									"        pm.expect(properties).to.eql(expectedProperties);\r",
									"    });\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRE_5135967_me",
									"type": "string"
								},
								{
									"key": "username",
									"value": "sshedava@opisnet.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://client.chemicalmarketanalytics.com/proxy/bcidataapi/chemical/v1/dictionaries",
							"protocol": "https",
							"host": [
								"client",
								"chemicalmarketanalytics",
								"com"
							],
							"path": [
								"proxy",
								"bcidataapi",
								"chemical",
								"v1",
								"dictionaries"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PWS",
			"value": "Microtech2012#"
		}
	]
}